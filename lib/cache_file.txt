const ListTile(
            title: Text(
              "Title of the Book first book",
              style: TextStyle(fontSize: 20),
            ),
            subtitle: Text(
              "Auther of the Book first book",
              style: TextStyle(fontSize: 14, color: Colors.grey),
            ),
          )


SizedBox(
          width: DimensionsOfScreen.dimensionsOfWidth(context, 70),
          child: const Text(
            "Title of the Book first book",
            style: TextStyle(fontSize: 20),
          ),
        ),
        SizedBox(
          width: DimensionsOfScreen.dimensionsOfWidth(context, 70),
          child: const Text(
            "Auther of the Book first book",
            style: TextStyle(fontSize: 14, color: Colors.grey),
          ),
        ),


 Text(
          "Title of the Book first book",
          style: const TextStyle(fontSize: 20),
        ),
        Text(
          "Auther of the Book first book",
          style: const TextStyle(fontSize: 14, color: Colors.grey),
        )




        const Text(
              "Harry Potter and the Goblet of Fire",
              style: Styles.textStyle20,
            ),
           const  Text(
              "J.K. Rowling",
              style: Styles.textStyle14.copyWith(
                fontWeight: FontWeight.w500,
              ),)

 padding: EdgeInsets.only(
          bottom: 0,
          top: DimensionsOfScreen.dimensionsOfHeight(context, 2),
          right: DimensionsOfScreen.dimensionsOfWidth(context, 3),
          left: DimensionsOfScreen.dimensionsOfWidth(context, 3),
        ),



        Image.asset(
            firstWidget,
            width: 100,
            height: 41,
          )





           GestureDetector(
          onTap: () {},
          child: Container(
            height: height,
            width: width,
            alignment: Alignment.center,
            decoration: const BoxDecoration(
                color: AppColors.whiteColor,
                borderRadius: BorderRadius.only(
                    topLeft: Radius.circular(kBorderRadiusValue),
                    bottomLeft: Radius.circular(kBorderRadiusValue))),
            child: Text(
              "19.99$kEuroSympol",
              style: Styles.textStyle18.copyWith(
                fontWeight: FontWeight.w600,
                color: AppColors.primaryColor,
              ),
            ),
          ),
        ),
        GestureDetector(
          onTap: () {},
          child: Container(
            height: height,
            width: width,
            alignment: Alignment.center,
            decoration: const BoxDecoration(
                color: AppColors.orangeColor,
                borderRadius: BorderRadius.only(
                    topRight: Radius.circular(kBorderRadiusValue),
                    bottomRight: Radius.circular(kBorderRadiusValue))),
            child: Text(
              "Free preview",
              style: Styles.textStyle16.copyWith(
                fontFamily: kRoboto,
                fontWeight: FontWeight.normal,
                color: AppColors.whiteColor,
              ),
            ),
          ),
        ),


        import 'package:bookly_app/constents.dart';
import 'package:flutter/material.dart';

class CustomButton extends StatelessWidget {
  const CustomButton({
    super.key,
    required this.text,
    required this.style,
    required this.backgroundColor,
    this.borderRadiusLeft = Radius.zero,
    this.borderRadiusRight = Radius.zero,
    this.onPressed,
  });
  final String text;
  final TextStyle style;
  final Color backgroundColor;
  final Radius borderRadiusLeft;
  final Radius borderRadiusRight;
  final void Function()? onPressed;
  @override
  Widget build(BuildContext context) {
    return TextButton(
      onPressed: onPressed,
      style: TextButton.styleFrom(
        backgroundColor: backgroundColor,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.horizontal(
            left: borderRadiusLeft,
            right: borderRadiusRight,
          ),
        ),
      ),
      child: Text(
        text,
        style: style,
      ),
    );
  }
}


didn't work with me 
||||||||||||||||||||
vvvvvvvvvvvvvvvvvvvv

class BookDetailsViewBody extends StatelessWidget {
  const BookDetailsViewBody({super.key});

  @override
  Widget build(BuildContext context) {
    double width40 = DimensionsOfScreen.dimensionsOfWidth(context, 40);
    return CustomScrollView(
      slivers: [
        SliverFillRemaining(
          hasScrollBody: false,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.start,
            children: [
              //AppBar
              const CustomBookDetailAppBar(),
              const SizedBox(
                height: 33,
              ),
              //Book Card
              SizedBox(
                width: width40,
                child: const BookCardItemView(),
              ),
              const SizedBox(
                height: 45,
              ),
              //Text of detail in book view
              const TextOfDetailOfBookView(),
              const SizedBox(
                height: 37,
              ),
              //Pay and Preview buttons
              SizedBox(
                width: DimensionsOfScreen.dimensionsOfWidth(context, 75),
                child: const PayAndFreePreviewButtons(),
              ),

              SizedBox(
                height: 50,
              ),
              Align(
                alignment: Alignment.centerLeft,
                child: Text(
                  "You can also like",
                  style: Styles.textStyle14.copyWith(
                    fontWeight: FontWeight.w600,
                    color: AppColors.whiteColor,
                  ),
                ),
              ),
              const SizedBox(
                height: 16,
              ),
              //list of "You can also like"
              const SizedBox(
                height: 112,
                child: SimilarBookListView(),
              ),
              const SizedBox(
                height: 40,
              )
            ],
          ),
        ),
      ],
    );
  }
}


late final ScrollController _scrollController;

  int nextPage = 1;

  bool isLoading = false;

  @override
  void initState() {
    super.initState();
    _scrollController = ScrollController();
    _scrollController.addListener(_scrollListener);
  }

  void _scrollListener() async {
    var currentPositions = _scrollController.position.pixels;
    var maxScrollLength = _scrollController.position.maxScrollExtent;
    if (currentPositions >= 0.7 * maxScrollLength) {
      if (!isLoading) {
        isLoading = true;
        await BlocProvider.of<NewestFreeBooksCubit>(context)
            .fetchNewestBooks(pageNumber: nextPage++);
        isLoading = false;
      }
    }
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }